---
always_allow_html: yes
---

# EM Self Report

This page contains tables that summarize self report data for the DETECT F/U Interviews participants. Data for all follow-up visits is included even if a participant was visited more than once.

```{r}
#| include: false

library(dplyr, warn.conflicts = FALSE)
library(haven)
library(freqtables)
library(flextable)
library(officer)
library(knitr)
library(here)

# Import the data that will be used to create the tables.
sfr_path <- here::here("data", "cleaned_rds_files", "self_report_import.rds")
sfr <- readRDS(sfr_path)

# Import data frame containing description of variables
sfr_desc_path <- here::here("sections", "variable_descriptions", "self_report_var_desc.rds")
sfr_desc <- readRDS(sfr_desc_path)

# Import functions that will be used to calculate statistics
# Overall - Continuous columns
source(here::here("R", "n_mean_ci.R"))
source(here::here("R", "n_median_ci.R"))
source(here::here("R", "cont_stats.R"))

# Overall - Categorical columns
source(here::here("R", "n_percent_ci.R"))
```

<!-- ## Create lists of columns to analyze -->

```{r}
#| echo: false
sfr_cat_cols <- sfr %>% select(ends_with("cat_f")) %>% select(order(colnames(.))) %>% names()
```

```{r}
#| echo: false

sfr_cont_cols <- sfr %>% select(ends_with("years"), ends_with("times")) %>% select(order(colnames(.))) %>% names()
```

<!-- ## Create data frames that contains overall summary statistics for categorical and continuous data -->

<!-- ### Continuous data -->

```{r}
#| echo: false
#| warning: false
# add continuous variables to list
sfr_cont_stats_list <- sfr_cont_cols  |> 
  rlang::set_names(sfr_cont_cols) |> 
  purrr::map(~ n_mean_ci(sfr, !! rlang::sym(.x), 1))
```

```{r}
#| echo: false
sfr_cont_table <- purrr::map_dfr(
  # Bind the rows together
  .x = sfr_cont_cols,
  .f = ~ dplyr::bind_rows(sfr_cont_stats_list[[.x]])
)

# Reorder the columns so that `cat` comes after `var`
sfr_cont_table <- sfr_cont_table |> 
  dplyr::select(everything())

# Add description column 
sfr_cont_table <- sfr_cont_table %>%
  left_join(., sfr_desc, by = c("var" = "name"))
```

<!-- ### Categorical data -->
```{r}
#| echo: false
#| warning: false
# add categorical variables to list
sfr_cat_stats_list <- sfr_cat_cols |>
  rlang::set_names(sfr_cat_cols) |> 
  purrr::map(~ n_percent_ci(sfr, !! rlang::sym(.x), 1))

```

```{r}
#| echo: false

sfr_cat_table <- purrr::map_dfr(
  # Bind the rows together
  .x = sfr_cat_cols,
  .f = ~ dplyr::bind_rows(sfr_cat_stats_list[[.x]])
)

# Reorder the columns so that `cat` comes after `var`
sfr_cat_table <- sfr_cat_table |> 
  dplyr::select(everything())

# Add description column 
sfr_cat_table <- sfr_cat_table %>%
  left_join(., sfr_desc, by = c("var" = "name"))
```

```{r}
#| echo: false
# Split data frame into list of data frames by variable
sfr_cat_table_list <- split(sfr_cat_table, sfr_cat_table$var)

```


<!-- ## Create Flextables -->

## Continuous Variable Tables

```{r, echo = FALSE}
# Create flextable
cont_flextable <- flextable(sfr_cont_table, col_keys = c("var", "description",  "n", "formatted_stats")) %>%
  # Rename columns
  set_header_labels(
    var = "Variable",
    description = "Description",
    "n" = "N",
    "formatted_stats" = "Mean of N (95% CI)") %>%
  
  # Shade alternating rows using zebra theme
  theme_zebra(
    odd_header = "transparent",
    odd_body = "transparent",
    even_header = "transparent",
    even_body = "#f1f1f1"
  ) %>%
  
  # Add border lines to header and format header
  border(i = 1, part = "header", border.top = fp_border(color = "black"), border.bottom = fp_border(color = "black")) %>%
  bold(i = 1, part = "header", bold = FALSE) %>%
  
  # Set header alignment
  align(align = "left", part = "header") %>%
  
  # Set table width and alignment
  width(j = c(1,2,3,4), width = c(2, 3.6, 1, 2), unit = 'in') %>%
  align(align = "left", part = "all") 
  
cont_flextable
```


## Categorical Variable Tables

```{r, include = FALSE}
cat_flextable <- function(var_name, table_list = sfr_cat_table_list) {
  # Extract each variable data frame from list 
  df <- data.frame(table_list[[var_name]])
  
  # Set up table header line text including variable name and description
  title_cap <- as_paragraph(var_name)
  desc_cap <- df %>% select(description) %>% unique() %>% toString() %>% as_paragraph()
    
    # Create flextable
    flex_tab <- flextable(df, col_keys = c("var", "cat", "n", "formatted_stats")) %>%
      # Rename columns
      set_header_labels(
        var = "Variable", 
        cat = "Category", 
        "n" = "N",
        "formatted_stats" = "Percent of N (95% CI)") %>%
      
      # Shade alternating rows using zebra theme
      # Format Header lines
      add_header_lines(desc_cap) %>%
      add_header_lines(title_cap) %>%
      bg(bg = "transparent", part = "header", i = c(1,2)) %>%
      align(align = "left", part = "header") %>%
      
      # Shade alternating rows using zebra theme
      theme_zebra(
        odd_header = "transparent",
        odd_body = "transparent",
        even_header = "transparent",
        even_body = "#f1f1f1"
      ) %>%
      
      # Add border lines to header and format header
      border(i = 3, part = "header", border.top = fp_border(color = "black"), border.bottom = fp_border(color = "black")) %>%
      bold(i = c(2,3), part = "header", bold = FALSE) %>%
      
      # Set width and alignment
      width(j = c(1,2,3,4), width = c(3, 2.6, 1, 2), unit = "in") %>%
      align(align = "left", part = "all") %>%
      # add space for website view
      add_footer_lines("")
    
    flex_tab
}
```


```{r, results ='asis', echo=FALSE}
flextables <- lapply(sfr_cat_cols, cat_flextable)

for (x in 1:length(sfr_cat_cols)) {
  cat(knit_print(flextables[[x]]))
  }

```

## Download Tables in Word File

```{r}
#| include: false

# Define title and subtitle styles
title_style <- fp_text_lite(font.size = 18, bold = TRUE)
subtitle_style <- fp_text_lite(font.size = 14, bold = TRUE, color = "#A7A7A7")


#  Create an empty Word document
sfr_doc <- read_docx()


sfr_doc <- sfr_doc %>%
  
  # Add Headings
  body_add_fpar(fpar(ftext("Self Report Tables", prop = title_style))) %>%
  body_add_par("") %>%
  body_add_fpar(fpar(ftext("Continuous Variables", prop = subtitle_style))) %>%
  body_add_par("") %>%
  
  # Add continuous variable tables to Word document
  body_add_flextable(width(cont_flextable, j = c(1,2,3,4), width = c(2, 2.7, 0.7, 1.4), unit = "in"), align = "left") %>%
  body_add_par("") %>%
  body_add_break(pos = "after") %>%
  
  # Add Heading
  body_add_fpar(fpar(ftext("Categorical Variables", prop = subtitle_style))) %>%
  body_add_par("")

# Add categorical variable tables into Word document
for (var_name in sfr_cat_cols) {
  cat_flex <- cat_flextable(var_name)
  # Set width of tables
  cat_flex <- cat_flex %>% width(j = c(1,2,3,4), width = c(2, 2.7, 0.7, 1.4), unit = "in") %>%
    # Remove space for document view
    delete_part(part = "footer") %>%
    # Prevent table breaking up into different pages.
    paginate(init = TRUE, hdr_ftr = TRUE)
  # Align tables and add a separating empty line between each table    
  sfr_doc <- sfr_doc %>%
    body_add_flextable(cat_flex, align = "left") %>%
    body_add_par("")
    
}
  

# print the word document
print(sfr_doc, target = here::here("sections", "self_report_tables.docx"))
```

```{r}
#| label: download_docx
#| echo: false

downloadthis::download_file(
  path = "self_report_tables.docx",
  output_name = "Self Report Tables",
  button_label = "Download table",
  button_type = "success",
  has_icon = TRUE,
  icon = "fa fa-save"
)
```





